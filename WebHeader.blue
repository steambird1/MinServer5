# For VBWeb Server
# Automaticly insert

class receiver:
	shared class
	shared attributes
	shared path
	shared http_version
	shared method
	shared content

class post_data:
	init:
		set this.myfile=null
		set this.attributes=null
		set this.name=null
	function open:
		if this.myfile=null:
			return null
		set reader=new binary_reader
		run reader.open this.myfile
		return reader

class sender:
	shared class
	function _setfiles fname:
		set sender.sendname=fname
		set sender.stream=new binary_writer
		set sender.contentin=0
		set sender.finished=0
		run sender.stream.open sender.sendname,1
	function write data:
		if page_mode:
			raise "Cannot use sender"
		run sender.stream.write data
	function writebin binary:
		if page_mode:
			raise "Cannot use sender"
		set binary_o=object binary
		run sender.stream.write_binary binary_o
	function write_header server_version response_code response_text:
		if page_mode:
			raise "Cannot use sender"
		if not boolean sender.contentin:
			run sender.write (server_version+" "+response_code+" "+response_text+LF)
	function write_attribute key value:
		if page_mode:
			raise "Cannot use sender"
		if not boolean sender.contentin:
			run sender.write (key+": "+value+LF)
	function start_content:
		if page_mode:
			raise "Cannot use sender"
		if not boolean sender.contentin:
			set sender.contentin=1
			run sender.write LF
	function send_content_str data:
		if page_mode:
			raise "Cannot use sender"
		run sender.write_attribute "Content-Length",(len data)
		run sender.start_content
		run sender.write data
		set sender.finished=1

class keeper:
	shared class
	shared data
	function _init fname:
		set keeper.data=new dict
		set keeper.newadder=new list
		set keeper.commander=fname
	function _set key value:
		set keeper.data:key=value
	function sync:
		set syncer=new writer
		syncer.open keeper.commander,false,false
		for i=0~keeper.newadder.length:
			syncer.write ("keep "+(keeper.newadder:i)+"="+(keeper.data:(keeper.newadder:i))+LF)
		syncer.close
	function set key value:
		keeper.newadder.append key
		keeper._set key,value
	function get key:
		return keeper.data:key

# Execution component
set receiver.content=new list
# Normal content generated by server

